#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\language spanish
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
This file is a solution template for:
\end_layout

\begin_layout Plain Layout

\lang latin
- Talk at a conference/colloquium.
 
\end_layout

\begin_layout Plain Layout

\lang latin
- Talk length is about 20min.
 
\end_layout

\begin_layout Plain Layout

\lang latin
- Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout

\lang latin
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title

\lang latin
Sistema Integrado para el manejo de video en dos dimensiones
\begin_inset OptArg
status collapsed

\begin_layout Plain Layout

\lang latin
TT20090039 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
optional, use only with long paper titles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subtitle

\lang latin
TT20090039
\end_layout

\begin_layout Author

\lang latin
Díaz Real Eduardo 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Hernández Contreras Edgar 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Loyola Diaz Karina Jessica 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Serna Romero Mauricio Iván
\begin_inset Newline newline
\end_inset

Dr.
 Miguel Ángel Alemán Arce 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Dr.
 Amilcar Menéses Viveros
\end_layout

\begin_layout Date

\lang latin
Escuela Superior de Cómputo
\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame

\lang latin
Agenda
\end_layout

\begin_layout Standard

\lang latin
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang latin
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Plain Layout

\lang latin
- Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Plain Layout

\lang latin
- At *most* three subsections per section.
 
\end_layout

\begin_layout Plain Layout

\lang latin
- Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Plain Layout

\lang latin
- A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Plain Layout

\lang latin
- In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Plain Layout

\lang latin
- If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang latin
Introducción
\end_layout

\begin_layout Subsection

\lang latin
Motivación
\end_layout

\begin_layout BeginFrame

\lang latin
Dispositivos electrónicos de uso personal
\end_layout

\begin_layout Itemize

\lang english
Teléfonos móviles (iPhone)
\end_layout

\begin_layout Itemize

\lang english
PDAs (Nokia N900)
\end_layout

\begin_layout Itemize

\lang english
Reproductor MP3 (iPod Touch)
\end_layout

\begin_layout Itemize

\lang english
Laptops
\end_layout

\begin_layout Itemize

\lang english
Impresoras
\end_layout

\begin_layout Itemize

\lang english
Routers
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\lang english
Objetivo
\end_layout

\begin_layout Itemize

\lang latin
Aprender a utilizar la tecnología actual, para ser capaces de diseñar y
 desarrollar una plataforma que permita crear aplicaciones embedidas.
\end_layout

\begin_layout Itemize

\lang latin
Generar un aplicación de manejo de video utilizando este ambiente.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection

\lang latin
Planteamiento del problema
\end_layout

\begin_layout BeginFrame
Ambiente de desarrollo
\end_layout

\begin_layout Itemize
Compilador
\end_layout

\begin_layout Itemize
Simulador de programas
\end_layout

\begin_layout Itemize
Tarjeta de desarrollo
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Requerimientos del sistema
\end_layout

\begin_layout Itemize
Accesible
\end_layout

\begin_layout Itemize
Buena documentación
\end_layout

\begin_layout Itemize
Flexible
\end_layout

\begin_layout Itemize
Confiable
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Tecnologías Disponibles
\end_layout

\begin_layout Itemize
ARM
\end_layout

\begin_layout Itemize
Blackfin
\end_layout

\begin_layout Itemize
MIPS
\end_layout

\begin_layout Itemize
PIC
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Tecnologías ARM
\end_layout

\begin_layout Itemize

\lang english
Es posible desarrollar diferentes dispositivos electrónicos utilizando la
 tecnología ARM.
\end_layout

\begin_layout Itemize

\lang english
Pueden interactuar con otras arquitecturas.
\end_layout

\begin_layout Itemize

\lang english
Arquitectura RISC.
\end_layout

\begin_layout Itemize

\lang english
Bajo consumo de energía.
\end_layout

\begin_layout Itemize

\lang english
Procesador de 32 bits.
\end_layout

\begin_layout BeginFrame
Tecnología ARM
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tablaarm1.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard

\shape italic
\size tiny
\lang english
http://www.design-reuse.com/news_img/20090430_microprocessor-market-forecast.gif
\end_layout

\begin_layout BeginFrame
Tecnología ARM
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tablaarm2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\size tiny
\lang english
http://www.design-reuse.com/news_img/20090430_microprocessor-market-forecast.gif
\end_layout

\begin_layout Section

\lang latin
Solución propuesta
\end_layout

\begin_layout Subsection
Funciones del software
\end_layout

\begin_layout BeginFrame
Funciones
\end_layout

\begin_layout Itemize
Simulador ARM flexible.
\end_layout

\begin_layout Itemize
Posiblidad de ayuda no sólo en el desarrollo sino también en el diseño.
\end_layout

\begin_layout Itemize
Fácil desarrollo en C y ensamblador.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection

\lang latin
Funciones de hardware
\end_layout

\begin_layout BeginFrame
Funciones
\end_layout

\begin_layout Itemize
Reproducción de video
\end_layout

\begin_layout Itemize
Trabajar con imágenes
\end_layout

\begin_layout Itemize
Depuración y programación de código
\end_layout

\begin_layout Itemize
Conexión de dispositivos de memoria externa
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section

\lang latin
Diseño del hardware
\end_layout

\begin_layout BeginFrame

\lang latin
Tarjeta
\end_layout

\begin_layout Itemize

\lang latin
Tarjeta SAM9-MX
\end_layout

\begin_layout Itemize

\lang latin
Smart ARM-Based microcontrollers
\end_layout

\begin_layout Itemize

\lang latin
AT91SAM9260
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Diagrama a bloques
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrama_bloques.png
	scale 40

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Dispositivos
\end_layout

\begin_layout Itemize
Microcontrolador AT91SAM9260
\end_layout

\begin_layout Itemize
Memorias 
\end_layout

\begin_layout Itemize
RAM MT48LC64M4A2
\end_layout

\begin_layout Itemize
NAND MT29F8G08DAA
\end_layout

\begin_layout Itemize
Flash AT45DB041B
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Dispositivos
\end_layout

\begin_layout Itemize
FTDI
\end_layout

\begin_layout Itemize
SD Card
\end_layout

\begin_layout Itemize
Puertos USB
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Desarrollo de Tarjeta
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename samEsquematico.png
	scale 17

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section

\lang latin
Diseño de software
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\lang latin
Herramientas para trabajar con ARM
\end_layout

\begin_layout Standard
Se evaluaron varias herramientas que existen actualmente, como:
\end_layout

\begin_layout Itemize

\lang latin
CrossWorks
\end_layout

\begin_layout Itemize

\lang latin
MDK-ARM
\end_layout

\begin_layout Itemize

\lang latin
GNU Compiler Collection(GCC)
\end_layout

\begin_layout Standard

\lang latin
Compilador GCC convierte codigo C a ensamblador
\end_layout

\begin_layout Standard
Ensamblador de GCC convierte lenguaje ensamblador a lenguaje maquina usando
 formato ELF
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\lang latin
Simulador
\end_layout

\begin_layout Standard

\lang latin
Requerimientos funcionales
\end_layout

\begin_layout Itemize

\lang latin
Simular conjuntos de instrucciones ARM
\end_layout

\begin_layout Itemize

\lang latin
Fácil desarrollo de simulador de componentes
\end_layout

\begin_layout Itemize
Fácil integración de componentes con el simulador
\end_layout

\begin_layout Itemize
Uso sencillo para el usuario final
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Simulador
\end_layout

\begin_layout FrameSubtitle
Análisis de requerimientos
\end_layout

\begin_layout Standard
Requerimientos no funcionales
\end_layout

\begin_layout Itemize
Ejecución solo en ambientes UNIX.
\end_layout

\begin_layout Itemize
Simula conjunto de instrucciones ARM, no Thumb ni Jazelle.
\end_layout

\begin_layout Itemize
Programación en C y ensamblador.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Simulador
\end_layout

\begin_layout FrameSubtitle
Análisis de requerimientos
\end_layout

\begin_layout Standard
Requerimientos físicos
\end_layout

\begin_layout Itemize
Sistemas UNIX con soporte de pthreads.
\end_layout

\begin_layout Itemize
Probado en plataformas de 32 y 64 bits.
\end_layout

\begin_layout Itemize
Fácil portabilidad a Max OS X, Solaris y BSD.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Simulador
\end_layout

\begin_layout FrameSubtitle
Diseño
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename memo.jpeg
	scale 50

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Simulador
\end_layout

\begin_layout FrameSubtitle
Diseño
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename aqr.jpeg
	scale 50

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Microkernel
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Microkernel.jpg
	scale 40

\end_inset


\end_layout

\begin_layout BeginFrame
Microkernel L4
\end_layout

\begin_layout Subtitle
Características
\end_layout

\begin_layout Itemize
Manejo de memoria virtual
\end_layout

\begin_layout Itemize
Manejo de hilos
\end_layout

\begin_layout Itemize
Calendarización
\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status open

\begin_layout Plain Layout
Hacer énfasis en que la ventaja del simulador en que es flexible y está
 diseñado para usar los dispositivos externos simulados.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang latin
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang latin
MAN: Aquí pon lo de las herramientas y tu parte del simulador, de preferencia
 pon 6 o 7 diapositivas, y trata de tardarte 1 minu por cada una, se supone
 según la gente que sabe que máximo debe de haber SEIS BULLETS por diapositiva.
\end_layout

\begin_layout Plain Layout

\lang latin
Puedes poner diagramas en diapositivas solas si quieres.
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame

\lang latin
Dispositivos simulados
\end_layout

\begin_layout FrameSubtitle

\lang latin
UART
\end_layout

\begin_layout Itemize

\lang latin
Se han desarrollado bibliotecas que permiten la simulación de dispositivos
 externos, por ejemplo la UART
\end_layout

\begin_layout Standard
\align center

\lang latin
\begin_inset Graphics
	filename UART.png
	scale 50

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Dispositivos simulados
\end_layout

\begin_layout FrameSubtitle
UART
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "uart1.c"
lstparams "language=C"

\end_inset


\end_layout

\begin_layout BeginFrame
Dispositivos simulados
\end_layout

\begin_layout FrameSubtitle
UART
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "uart2.c"
lstparams "language=C"

\end_inset


\end_layout

\begin_layout BeginFrame
Simulador
\end_layout

\begin_layout FrameSubtitle
ARMUX
\end_layout

\begin_layout Itemize
Implementación de malloc
\end_layout

\begin_layout Itemize
Implementación de una lista ligada
\end_layout

\begin_layout Itemize
Implementación de printf
\end_layout

\begin_layout Itemize
Variables estáticas
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Formato ELF
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename secciones.jpg
	scale 50

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
PICASO/FTDI
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
mu$
\end_layout

\end_inset

VGA PICASO-MD1 es un motor de gráficos por medio de comandos integrados.
\end_layout

\begin_layout Itemize
Por medio del dispositivo FTDI podemos comunicarnos con picaso simulando
 un puerto Serial a travez de un puerto USB.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename serie.jpg
	scale 10

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
PICASO/FTDI
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename prueba.jpg
	scale 25

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Conclusiónes
\end_layout

\begin_layout BeginFrame
Conclusiónes
\end_layout

\begin_layout Itemize
Se desarrollo simulador de ARM.
\end_layout

\begin_layout Itemize
Simulación de dispositivo UART.
\end_layout

\begin_layout Itemize
Cargador de programas.
\end_layout

\begin_layout Itemize
Diseño esquemático.
\end_layout

\begin_layout Section
Sesión de preguntas
\end_layout

\begin_layout BeginFrame
Preguntas
\end_layout

\begin_layout BeginFrame
Modos del procesador
\end_layout

\begin_layout Itemize
System
\end_layout

\begin_layout Itemize
User
\end_layout

\begin_layout Itemize
FIQ
\end_layout

\begin_layout Itemize
IRQ
\end_layout

\begin_layout Itemize
Abort
\end_layout

\begin_layout Itemize
Undefined
\end_layout

\begin_layout Itemize
Supervisor
\end_layout

\begin_layout BeginFrame
Registros ARM
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename registros.png
	scale 30

\end_inset


\end_layout

\begin_layout BeginFrame
RAM
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename samEsq3.png
	scale 30

\end_inset


\end_layout

\begin_layout Section*
\start_of_appendix

\lang latin
Apéndice
\end_layout

\end_body
\end_document
